<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Analysis of Algorithms</title>
    <url>/Algorithm/analysis/</url>
    <content><![CDATA[<p>This is a brief introduction on cost of algorithms, order of growth, Tilde and Big-Oh notations, and optimal algorithm.</p>
<span id="more"></span>
<h1 id="analysis-of-algorithms">Analysis of Algorithms</h1>
<p>Analysing an algorithm is mainly to develop a mathematical model on its cost. This mathematical model will help us to have some insights into the algorithm we are studying, as well as to predict how much the algorithm will cost given a set of input.</p>
<h2 id="step1---define-input-model">Step1 - Define <em>Input</em> Model</h2>
<p>What does the input look like? How big it is (the <em>problem size</em>)?</p>
<h2 id="step2---define-cost-model">Step2 - Define <em>Cost</em> Model</h2>
<h3 id="considering-everything">Considering Everything</h3>
<p>The most accurate way to calculate algorithm cost is to check <em>every</em> instruction and see its cost and how frequently it is executed.</p>
<p>But this can be too complex and overwhelming. It doesn't make much difference if we miss some insignificant operations.</p>
<p>So, we use a simpler approach:</p>
<h3 id="ignoring-something">Ignoring Something</h3>
<p>We only count the operations that are:</p>
<ul>
<li>most costly</li>
<li>executed most frequently</li>
</ul>
<p>In other words, operations that contribute most to the total cost.</p>
<h2 id="step3---mathematical-analysis">Step3 - Mathematical <em>Analysis</em></h2>
<p>Now we represent the cost in math.</p>
<p>Mathematical model of algorithm cost is based on probability:</p>
<p><span class="math display">\[
C=\sum p_ic_i
\]</span></p>
<p>where <span class="math inline">\(C\)</span> is overall cost of algorithm; <span class="math inline">\(p_i\)</span> is probability of case <span class="math inline">\(i\)</span>; <span class="math inline">\(c_i\)</span> is cost of algorithm when case <span class="math inline">\(i\)</span> happens.</p>
<p>But even if we're looking at an already smaller set of operations, the cost of them can lead to complex mathematical results, which might be: <span class="math display">\[
T(N)=N^3/6+N^2/2+N/3+10 \label{a}\tag{1}
\]</span> Also, we don't always need such a precise result. More often, an <em>approximation</em> works fine.</p>
<p>So, in order to:</p>
<ol type="1">
<li>simplify the formulas we work with</li>
<li>provide an <em>approximation</em> of values of interest (algorithm cost, in this case)</li>
</ol>
<p>We use <strong>tilde notation (<span class="math inline">\(\sim\)</span>)</strong>: <span class="math display">\[
T(N)\sim f(N)\iff \lim_{N\to\infty}{T(N)\over f(N)}=1
\]</span></p>
<p>Then we can turn formula <span class="math inline">\(\eqref{a}\)</span> to <span class="math inline">\(\sim 1/6N^3\)</span>, because <span class="math inline">\(\lim_{N\to\infty}{N^3/6+N^2/2+N/3+10\over 1/6N^3}=1\)</span>. Way simpler, right?</p>
<p>Here are more examples of tilde notation:</p>
<ul>
<li><p><span class="math inline">\({1\over 2}N^3+12N^2-4N-5 \sim {1\over 2}N^3\)</span></p></li>
<li><p><span class="math inline">\(6N+10 \sim 6N\)</span></p></li>
<li><p><span class="math inline">\(2^N-N^3+2N \sim 2^N\)</span></p></li>
</ul>
<div class="note warning"><p>Sometimes, however, tilde notation may be <strong>misleading</strong>.</p>
<p>When you have a cost of <span class="math inline">\(2N^2+10^6N\)</span>, you can not approximate it to <span class="math inline">\(\sim 2N^2\)</span>, because <span class="math inline">\(10^6\)</span> is too large to be negligible.</p>
</div>
<h2 id="example">Example</h2>
<ol type="1">
<li><em>Input</em> model is an array <code>a[]</code> of size N</li>
<li><em>Cost</em> model is compare operation (thus the total cost is the time spent on executing compare operation)</li>
<li><em>Analysis</em> shows the cost is <span class="math inline">\(\sim 1/6N^3\)</span></li>
</ol>
<h2 id="order-of-growth">Order of Growth</h2>
<p><span class="math inline">\(f(N)\)</span> is the <strong>order of growth</strong> of <span class="math inline">\(T(N)\)</span> when: <span class="math display">\[
T(N)\sim af(N)
\]</span></p>
<p>where <span class="math inline">\(f(N)=N^b\log^cN\)</span>, and <span class="math inline">\(a\)</span>, <span class="math inline">\(b\)</span>, <span class="math inline">\(c\)</span> are constants.</p>
<p>When an algorithm has cost of <span class="math inline">\(N^3/6+N^2/2+N/3+10\)</span>, for example, its order of growth is <span class="math inline">\(N^3\)</span>.</p>
<p>Some common examples are:</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">Description</th>
<th style="text-align: center;">Order of Growth</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Constant</td>
<td style="text-align: center;"><span class="math inline">\(1\)</span></td>
</tr>
<tr class="even">
<td style="text-align: center;">Logarithmic</td>
<td style="text-align: center;"><span class="math inline">\(\log N\)</span></td>
</tr>
<tr class="odd">
<td style="text-align: center;">Linear</td>
<td style="text-align: center;"><span class="math inline">\(N\)</span></td>
</tr>
<tr class="even">
<td style="text-align: center;">Linearithmic</td>
<td style="text-align: center;"><span class="math inline">\(N\log N\)</span></td>
</tr>
<tr class="odd">
<td style="text-align: center;">Quadratic</td>
<td style="text-align: center;"><span class="math inline">\(N^2\)</span></td>
</tr>
<tr class="even">
<td style="text-align: center;">Cubic</td>
<td style="text-align: center;"><span class="math inline">\(N^3\)</span></td>
</tr>
<tr class="odd">
<td style="text-align: center;">Exponential</td>
<td style="text-align: center;"><span class="math inline">\(2^N\)</span></td>
</tr>
</tbody>
</table>
<img src="/Algorithm/analysis/order-of-growth.png" class="" width="450" title="order-of-growth">
<p>Generally, algorithms whose running time has order of growth of <span class="math inline">\(N^2\)</span> or larger are incapable of solving many problems with large input in an acceptable amount of time.</p>
<div class="note warning"><p>Order of growth discards leading coefficient.</p>
<p>If <span class="math inline">\(T(N)\sim 2N\)</span>, then the order of growth is <span class="math inline">\(N\)</span>, not <span class="math inline">\(2N\)</span>.</p>
</div>
<h1 id="theory-of-algorithms">Theory of Algorithms</h1>
<p>Goal of this theory:</p>
<ul>
<li>Identify <em>difficulty</em> of a problem</li>
<li>Develop <em>optimal</em> algorithms</li>
</ul>
<h2 id="difficulty-of-problem">Difficulty of problem</h2>
<p>Notations used to identify how "difficult" a problem is:</p>
<table>
<colgroup>
<col style="width: 17%" />
<col style="width: 47%" />
<col style="width: 34%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Notation</th>
<th style="text-align: center;">Definition</th>
<th style="text-align: center;">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><span class="math inline">\(T(N)=O(f(N))\)</span></td>
<td style="text-align: center;"><span class="math inline">\(\exists c,n_0:N\geq n_0\Rightarrow T(N)\leq cf(N)\)</span></td>
<td style="text-align: center;"><span class="math inline">\(f(N)\)</span> is <em>upper bound</em> of <span class="math inline">\(T(N)\)</span></td>
</tr>
<tr class="even">
<td style="text-align: center;"><span class="math inline">\(T(N)=\Omega(g(N))\)</span></td>
<td style="text-align: center;"><span class="math inline">\(\exists c,n_1:N\geq n_1\Rightarrow T(N)\geq cg(N)\)</span></td>
<td style="text-align: center;"><span class="math inline">\(g(N)\)</span> is <em>lower bound</em> of <span class="math inline">\(T(N)\)</span></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><span class="math inline">\(T(N)=\Theta(h(N))\)</span></td>
<td style="text-align: center;"><span class="math inline">\(T(N)=O(h(N))\)</span> and <span class="math inline">\(T(N)=\Omega(h(N))\)</span></td>
<td style="text-align: center;"><span class="math inline">\(h(N)\)</span> is <em>order of growth</em> of <span class="math inline">\(T(N)\)</span></td>
</tr>
</tbody>
</table>
<h2 id="optimal-algorithm">Optimal Algorithm</h2>
<p>An optimal algorithm is an algorithm whose <strong>upper bound</strong> is as close as possible with its <strong>lower bound</strong>.</p>
<ul>
<li><p>Upper Bound</p>
<p>Cost of the best existing algorithm. Cost of the optimal one must be no larger than this.</p></li>
<li><p>Lower Bound</p>
<p>Essential cost that any algorithm trying to address current problem must have. The bottom line.</p></li>
</ul>
<p>Your mission is to find a new algorithm to diminish the gap between upper and lower bounds.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Union-Find</title>
    <url>/Algorithm/union-find/</url>
    <content><![CDATA[<h1 id="what-is-union-find-problem">What is Union-Find Problem</h1>
<h2 id="connectivity">Connectivity</h2>
<p><span class="math inline">\(a-b\)</span>: <span class="math inline">\(a\)</span> is connected with <span class="math inline">\(b\)</span></p>
<p>Properties:</p>
<ul>
<li><p><span class="math inline">\(a-a\)</span></p></li>
<li><p><span class="math inline">\(a-b \Longrightarrow b-a\)</span></p></li>
<li><p><span class="math inline">\(a-b,b-c \Longrightarrow a-c\)</span></p></li>
</ul>
<p><span class="math inline">\(A\)</span> is a <strong>connected component</strong>: <span class="math inline">\(a\in{A},b\in{A} \iff a-b\)</span></p>
<img src="/Algorithm/union-find/connected-component.jpg" class="" width="400" height="333" title="3 connected components">
<span id="more"></span>
<h2 id="union-find">Union-Find</h2>
<p><span class="math inline">\(union(a,b)\)</span>: <em>connect</em> <span class="math inline">\(a\)</span> and <span class="math inline">\(b\)</span></p>
<p><span class="math inline">\(find(a,b)\)</span>: <em>check</em> if <span class="math inline">\(a\)</span> and <span class="math inline">\(b\)</span> are connected <em>(True/False)</em></p>
<p>Example here:</p>
<img src="/Algorithm/union-find/union-find-eg.png" class="" width="350" height="220">
<p><strong><em>Problem</em></strong>:</p>
<p><span class="math inline">\(union()\)</span> any <span class="math inline">\(N\)</span> objects randomly, at random time, then: <span class="math inline">\({\forall}a,b\)</span>, do <span class="math inline">\(find(a,b)\)</span> at any time.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union(4, 0)</span><br><span class="line">union(3, 2)</span><br><span class="line">union(6, 5)</span><br><span class="line">union(4, 9)</span><br><span class="line">union(2, 1)</span><br><span class="line">find(0, 7)  // false</span><br><span class="line">find(8, 9)  // false</span><br><span class="line">union(5, 0)</span><br><span class="line">union(8, 6)</span><br><span class="line">find(8, 9)  // true</span><br></pre></td></tr></table></figure>
<h1 id="algorithms">Algorithms</h1>
<h2 id="quick-find">Quick Find</h2>
<p>connected <span class="math inline">\(\iff\)</span> same <strong>status</strong></p>
<p>In this picture, 1, 2 and 4 have the same status 4; they are connected.</p>
<img src="/Algorithm/union-find/quick-find.jpg" class="" width="350" height="270">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr[N];  // status of objects</span><br><span class="line"></span><br><span class="line">union(a,b) &#123;</span><br><span class="line">	sa = arr[a];  // arr[a] will be updated soon!</span><br><span class="line">	sb = arr[b];</span><br><span class="line">	// 与 a 状态相同的，全改成 b 的状态。</span><br><span class="line">	for all i in N:</span><br><span class="line">		if (arr[i] == sa):</span><br><span class="line">			arr[i] = sb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">find(a,b) &#123;</span><br><span class="line">	return arr[a] == arr[b];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="quick-union">Quick Union</h2>
<p>A connected component is now represented with a tree.</p>
<p>connected <span class="math inline">\(\iff\)</span> same <strong>root</strong></p>
<p>Entries in array represent <em>parents</em> of indices:</p>
<img src="/Algorithm/union-find/quick-union.jpg" class="" width="350" height="270">
<p>2's parent is 6, 6's parent is 4, 4's parent is 4, 4 is the root.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr[N];  // parents of objects</span><br><span class="line"></span><br><span class="line">root(i) &#123;</span><br><span class="line">	while (arr[i] != i)</span><br><span class="line">		i = arr[i];  // go to parent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">union(a, b) &#123;</span><br><span class="line">	ra = root(a);</span><br><span class="line">	rb = root(b);</span><br><span class="line">	arr[ra] = rb;  // set rb as ra&#x27;s parent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">find(a, b) &#123;</span><br><span class="line">	return root(a) == root(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>It can be very <em>slow</em> when the tree is too tall or high.</p>
<h2 id="improvements-on-qu">Improvements on QU</h2>
<p>Avoid <em>tall</em> trees. Reduce their height.</p>
<h3 id="weighted-qu">Weighted QU</h3>
<p>Smaller tree goes to bigger tree.</p>
<img src="/Algorithm/union-find/weighted-qu.png" class="" width="400" height="300">
<p>By "big" and "small", there are 2 kinds of explanations:</p>
<ol type="1">
<li><strong>size</strong>: number of nodes</li>
<li><strong>height</strong></li>
</ol>
<img src="/Algorithm/union-find/size-height.jpg" class="" width="400" height="285">
<p>Either way, the algorithm has guaranteed performance of <span class="math inline">\(\lg{N}\)</span> at worst case.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr[N];  // parents</span><br><span class="line">size[N];  // size of subtrees</span><br><span class="line">// height[N];  // height of subtrees</span><br><span class="line"></span><br><span class="line">union(a,b) &#123;</span><br><span class="line">	ra = root(a);</span><br><span class="line">	rb = root(b);</span><br><span class="line">	if (ra == rb):  // same root -&gt; connected</span><br><span class="line">		return;</span><br><span class="line">	if (size[ra] &gt;= size[rb]):  // a&#x27;s tree bigger</span><br><span class="line">		arr[rb] = ra;</span><br><span class="line">		size[ra] += size[rb];  // update size</span><br><span class="line">	else:  // b&#x27;s tree is bigger</span><br><span class="line">		arr[ra] = rb;</span><br><span class="line">		size[rb] += size[ra];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Result is as below, weighted QU tree is flat:</p>
<img src="/Algorithm/union-find/weighted-is-flat.png" class="" width="750" height="434">
<h3 id="path-compression">Path Compression</h3>
<p>When searching for root of <span class="math inline">\(i\)</span>, for each node in the path from <span class="math inline">\(i\)</span> to root, reconnect that node to root.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root(i) &#123;</span><br><span class="line">    while (parent[i] != i) &#123;</span><br><span class="line">        parent[i] = root(parent[i]);  // set i&#x27;s parent to root</span><br><span class="line">        i = parent[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return parent[i];  // parent[i] and i are equal if i is root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="tabs" id="path-compression"><ul class="nav-tabs"><li class="tab active"><a href="#path-compression-1">Before</a></li><li class="tab"><a href="#path-compression-2">After</a></li></ul><div class="tab-content"><div class="tab-pane active" id="path-compression-1"><p>9 is newly added to this tree.</p>
<p>x goes up along path 9 -&gt; 6 -&gt; 3 -&gt; 1 -&gt; 0.</p>
<p><img src="/Algorithm/union-find/path-compression-1.png" class="" width="300" height="375"></p></div><div class="tab-pane" id="path-compression-2"><p>9 , 6 and 3 are reconnected to root 0.</p>
<p><img src="/Algorithm/union-find/path-compression-2.png" class="" width="560" height="280"></p></div></div></div>
<p>Think of where there are <span class="math inline">\(M\)</span> union-find oprations and <span class="math inline">\(N\)</span> elements. Total time spent is dependent on <span class="math inline">\(M\)</span>, <span class="math inline">\(N\)</span>, and algorithm itself.</p>
<p>Weighted Quick-Union + Pass Compression <span class="math inline">\(\Rightarrow\)</span> near <em>Linear-time</em> (but still not).</p>
<div class="note warning"><p>Union-Find: <em><strong>No</strong> Linear-time algorithm.</em></p>
<p>That is, <span class="math inline">\(union()\)</span> and <span class="math inline">\(find()\)</span> cannot both be Constant-time.</p>
</div>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Collections</title>
    <url>/Data-Structure/collection/</url>
    <content><![CDATA[<p>In this article we consider 3 types of collections: stack, queue, and bag. They can all be implemented by the same underlying data structures -- either resizing array or linked-list.</p>
<span id="more"></span>
<h1 id="stack">Stack</h1>
<p>FILO (First In, Last Out) / LIFO (Last In, First Out).</p>
<img src="/Data-Structure/collection/stack.png" class="" width="200" height="280" title="Stack">
<h2 id="api">API</h2>
<ul>
<li>Create a stack</li>
<li>Push (add an element)</li>
<li>Pop (remove an element)</li>
</ul>
<h2 id="implementation">Implementation</h2>
<h3 id="linked-list">Linked List</h3>
<img src="/Data-Structure/collection/stack-linked-list.png" class="" width="200" height="400" title="Stack by Linked List">
<p>Each node in linked list:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Node &#123;</span><br><span class="line">	DataType data;</span><br><span class="line">	Node next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Advantage:</p>
<ul>
<li>Quick to add &amp; delete</li>
</ul>
<p>Drawback:</p>
<ul>
<li>Not so easy to access the element you want (may need linear time)</li>
</ul>
<p>Cost:</p>
<p><span class="math display">\[
\begin{gather*}
T(N)=O(1)\\
S(N)=\Theta (N)
\end{gather*}
\]</span></p>
<h3 id="resizing-array">Resizing Array</h3>
<img src="/Data-Structure/collection/stack-resizing-array.png" class="" width="364" height="150" title="Stack by Resizing Array">
<p>Resizing:</p>
<ul>
<li><code>Double</code> the length when array is <strong><em>full</em></strong></li>
<li><code>Halve</code> the length when array is <strong><em>1/4 full</em></strong></li>
</ul>
<p>Advantage:</p>
<ul>
<li>Quick to access every element (constant time)</li>
</ul>
<p>Drawback:</p>
<ul>
<li>Resizing is expensive when <span class="math inline">\(N\)</span> is large, because you must copy all existing elements to the new array</li>
<li>To save space, you have to rewind <code>tail</code> pointer when <code>head</code> is not at position 0</li>
</ul>
<p>Cost:</p>
<p><span class="math display">\[
T(N)=
\begin{cases}
\Theta (1),&amp;\text{best},\\
\Theta (N),&amp;\text{worst},\\
\Theta (1),&amp;\text{amortized},
\end{cases}
\]</span></p>
<h1 id="queue">Queue</h1>
<p>FIFO (First In, First Out).</p>
<img src="/Data-Structure/collection/queue.png" class="" width="400" height="100" title="Queue">
<h2 id="api-1">API</h2>
<ul>
<li>Create a queue</li>
<li>Enqueue / add</li>
<li>Dequeue / remove</li>
</ul>
<h2 id="implementation-1">Implementation</h2>
<h3 id="linked-list-1">Linked List</h3>
<img src="/Data-Structure/collection/queue-linked-list.png" class="" width="640" height="160" title="Queue by Linked List">
<h3 id="resizing-array-1">Resizing Array</h3>
<img src="/Data-Structure/collection/queue-resizing-array.png" class="" width="418" height="160" title="Queue by Resizing Array">
<h1 id="bag">Bag</h1>
<p>No order, no out.</p>
<img src="/Data-Structure/collection/bag.png" class="" width="200" height="280" title="Bag">
<h2 id="api-2">API</h2>
<ul>
<li>Create a bag</li>
<li>Add an element</li>
</ul>
<h2 id="implementation-2">Implementation</h2>
<p>A bag is just a stack without pop, or a queue without dequeue. I'm sure you can figure it out easily. : )</p>
]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
  </entry>
  <entry>
    <title>How to Read a Book</title>
    <url>/How-To/read-book/</url>
    <content><![CDATA[<p>My tips for reading a book: outline first, details second; focus on the material, not on note-taking; you will remember naturally.</p>
<span id="more"></span>
<pre class="mermaid">
graph LR

a[Overview] --&gt; b[Question]

b --&gt; c[Read]

c --&gt; d[Note-Taking] --&gt; c

d --&gt; e[Recall] --&gt; a

e --&gt; f[Review]

</pre>
<div class="note info"><p>Split the material into <strong><em>chunks</em></strong>.</p>
<p>Finish the procedure for each chunk, then move on to the next chunk.</p>
</div>
<h1 id="skim-for-an-overview">Skim for an Overview</h1>
<p>Look only at titles, subtitles, some keywords and probably summaries.</p>
<p>The purpose is to get a whole overview of the material you are reading. Look, when you are in a new place, you can't expect to know where is where without a <em>lay</em> of it, can you?</p>
<h1 id="ask-questions-on-the-topic">Ask Questions on the Topic</h1>
<p>You must be curious about the topic!</p>
<p>For those who are, questions are unstoppable. "Is he going to talk about that thing?"</p>
<p>If it is not exciting to you, try to link it with something is. You may find that there are lots of usages of physics when playing baseball.</p>
<p>You can write down these questions.</p>
<h1 id="read">Read</h1>
<p>Visualise information as much as possible.</p>
<p>All texts are just a description of a series of phenomina, and you want to see them with your own eyes.</p>
<h1 id="take-notes">Take Notes</h1>
<ul>
<li>Take notes after reading a whole paragraph to get the entire idea.</li>
<li>Don't do it as a job. Do it for fun.</li>
<li>Write whatever you want, e.g. short sumary of the idea, questions not answered, your observations, your opinion, etc.</li>
</ul>
<p>Notes are just tools to help you, not the purpose itself.</p>
<p>When you totally focus on reading, your brain will automatically pick up the most important thing for you, so all you have to do is enjoy your reading and keep your flow.</p>
<p>Don't worry about forgetting, because it's not the right time. It is <em>after</em> reading and note-taking when we'll check how much we remember and how we can memorise more.</p>
<h1 id="recall">Recall</h1>
<p>Don't look at the material, recall what you've just read and write a summary in your own words. Check how well you memorise.</p>
<p>If you took your questions down as mentioned before, then you've got small quizzes to do the check! Go and take it!</p>
<h1 id="review">Review</h1>
<p>According to the Ebbinghaus Forgetting Curve, in first few days, you have to review what you learned every few hours every day. Then review them every few days, then every few weeks, then maybe never.</p>
<p>The intensity is less, as you remember the same knowlegde better.</p>
<details class="note info"><summary><p>Things to keep in mind:</p>
</summary>
<ol type="1">
<li><p>Outline first, details second.</p></li>
<li><p>Visualise while reading.</p></li>
<li><p>Keep your notes in your own words.</p></li>
<li>If you don't understand something you read, Ask Somebody. It may take you hours, but it takes only a word for those who know.</li>
<li><p>Don't give up. You may think it slow to do so much work reading so little, but you'll find it saves you much more time when you have your notes without having to re-read the book all over again just to find that tiny bit of information you forgot. In fact, you'll learn so well that reviewing for exams will take you little time.</p></li>
</ol>

</details>
]]></content>
      <categories>
        <category>How-To</category>
      </categories>
  </entry>
  <entry>
    <title>How can we better solve problems?</title>
    <url>/How-To/solve-problem/</url>
    <content><![CDATA[<pre class="mermaid">
graph LR

s((start)) --&gt; o[observe]

o --&gt;|1st time and 1st time only| h[hypothesis]

h --&gt; p[predict]

p --&gt; o

o --&gt; c[check]

c --&gt; a{prediction agrees with observation?}

a --&gt;|y| e((end))

a --&gt;|n| h

</pre>
]]></content>
      <categories>
        <category>How-To</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/%E9%9A%8F%E6%83%B3%E4%B8%8E%E6%91%98%E5%BD%95/1/</url>
    <content><![CDATA[<p>自己内心的需求，是要无条件去满足的。外界的标准，让它止步于外界，因为不适用于自己；内心的声音，让它被重视，因为那是自己的一切。 小心被噪音割碎灵魂。</p>
]]></content>
      <categories>
        <category>随想与摘录</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/%E9%9A%8F%E6%83%B3%E4%B8%8E%E6%91%98%E5%BD%95/2/</url>
    <content><![CDATA[<p>Any attempt to get control over me is, and will be proven to be, an illusion. They have no rights or ability to do so. One must strengthen one's heart and not bow to such illusion, not by fighting vaguely, but by focusing on self, and making it safe.</p>
]]></content>
      <categories>
        <category>随想与摘录</category>
      </categories>
  </entry>
  <entry>
    <title>成年人对自己的责任</title>
    <url>/%E9%9A%8F%E6%83%B3%E4%B8%8E%E6%91%98%E5%BD%95/%E3%80%8A%E5%8E%9F%E7%94%9F%E5%AE%B6%E5%BA%AD%E3%80%8B%EF%BC%88%E8%8B%8F%E7%8F%8A%C2%B7%E7%A6%8F%E6%B2%83%E5%BE%B7%EF%BC%89/chengnianzeren/</url>
    <content><![CDATA[<blockquote>
<p>“作为一个成年人，在和父母的关系中，我需要为……负责”：</p>
<ol type="1">
<li><p>成为一个独立于父母的个体。</p></li>
<li><p>诚实地看待自己和父母的关系。</p></li>
<li><p>面对童年的事实。</p></li>
<li><p>勇敢地承认自己童年的经历和成年后生活的关系。</p></li>
<li><p>勇敢地向父母表达自己真实的想法。</p></li>
<li><p>面对并消除父母对自己生活的控制，无论他们是否健在。</p></li>
<li><p>当自己的行为残忍、刻薄，伤害到别人时，改变自己的行为。</p></li>
<li><p>找到合适的方式来治愈内心的童年创伤。</p></li>
<li><p>重新获得自己作为成年人的权力和自信。</p></li>
</ol>
<p>上面的每一条都是需要付出努力去实现的目标，不可能在一夕之间做到，认识这一点很重要。当你努力时，会遇到困难，你会退回到过去的行为和思考模式中，甚至可能会决定放弃。不要灰心丧气。其实，这些挫折都应该在你的意料之中。恢复是一个过程，注定不会顺利。有些目标可能实现起来不太容易，但总体说来它们都是可实现的，你一定可以把自己内心的孩子从永久的惩罚中解脱出来。</p>
</blockquote>
]]></content>
      <categories>
        <category>随想与摘录</category>
        <category>《原生家庭》（苏珊·福沃德）</category>
      </categories>
  </entry>
  <entry>
    <title>独立与自主</title>
    <url>/%E9%9A%8F%E6%83%B3%E4%B8%8E%E6%91%98%E5%BD%95/duli-zizhu/</url>
    <content><![CDATA[<h1 id="自主">自主</h1>
<p><strong>自主</strong>由选择和边界两大要素构成。</p>
<p><strong>选择</strong>指作出选择的权利，关于此，重要的不是考虑自己有没有这个权利，而是要意识到，无论任何时候，自己总是拥有这个权利。极端的例子是，即使被关起来，身体丝毫不能自由活动，但思想始终可以自由徜徉。因此，比较好的看待这个问题的方式是，自己始终拥有选择，要考虑的只是如何选择。当然，自己作出的选择，其结果也要自己承担。因此，自由是伴随着责任而实现的，没有责任，也就没有了真正意义上的自由。凡作出选择而无法承担相应结果的，该结果必定由其他人承担。责任转移到他人身上，就变成了他人的“课题”，于是自己再也没有权利过问。</p>
<p><strong>边界</strong>确定了自己及他人的自由在多大的范围内生效。自己的自由和权利不能侵犯他人的自由和权利，同时自己也不能让他人随意进出自己的边界，这是很简单的道理。</p>
<p>自主的对立面是<strong>控制</strong>。人类物种的一个伟大之处，在于有能力控制事物朝预期的方向发展。垂死之人安排后事，人们利用自然规律及社会规则改造自然和社会、改变其发展方向，都是这种能力的集中体现。对人的控制，有时是必需的，比如少不更事的孩子，其行为范围最好在监护人的控制之下。但如果对他人的控制仅仅出于满足私欲，而不是出于对被控制一方真正意义上的爱，那么被控制的一方需要一些方法来摆脱控制。</p>
<h1 id="独立">独立</h1>
<p><strong>独立</strong>指能在不依靠他人的前提下，满足自己的需求。比如不必向人借钱、向父母要钱来购买商品，比如孩子不再需要大人喂他吃饭，比如能自己搜集信息来作出判断而不是人云亦云（他人的观点也需要自己主动审视之后决定是否采纳）。</p>
<p>独立的对立面是<strong>依赖</strong>。人不可能做到完全独立，因为人不可能在所有领域成为专家，所以有必要在某些事情上依赖他人的力量。</p>
<p>一样事物，对于需要它的一方，远比对提供它的一方显得更重要。我们有求于人时，总会表现得比平时更谦和，还会给能够提供帮助的人冠以各种尊敬的称呼、送给丰厚的礼品，有时甚至会让渡一定的自主权利。</p>
<p>适度的依赖有利于自己的社会化过程，而过度依赖就是把性命交托对方，是不负责任的行为。</p>
]]></content>
      <categories>
        <category>随想与摘录</category>
      </categories>
  </entry>
  <entry>
    <title>放弃斗争</title>
    <url>/%E9%9A%8F%E6%83%B3%E4%B8%8E%E6%91%98%E5%BD%95/%E3%80%8A%E5%8E%9F%E7%94%9F%E5%AE%B6%E5%BA%AD%E3%80%8B%EF%BC%88%E8%8B%8F%E7%8F%8A%C2%B7%E7%A6%8F%E6%B2%83%E5%BE%B7%EF%BC%89/fangqidouzheng/</url>
    <content><![CDATA[<blockquote>
<p>你内心那个苦苦挣扎的孩子可能还执着地希望，终有一天父母会发现你有多棒，并给予你关爱，不论他们的能力多么有限。面对父母对你的莫名责怪，你虽然不解，虽然心碎，但还是决定尽可能地为自己莫须有的过错做出补偿。可当你回到他们身边，渴望重获童年缺失的抚慰和认同时，你却发现自己犹如从枯井取水，一无所获。</p>
</blockquote>
<hr />
<blockquote>
<p>我们竭尽所能地做出种种抗争，希望父母可以对我们更加慈爱和宽容。可是这种斗争会耗尽我们的精力，使我们的生活充满混乱和痛苦，注定徒劳无功。获胜的唯一办法就是放弃这种抗争。</p>
</blockquote>
<hr />
<blockquote>
<p>你必须放弃：</p>
<ul>
<li>改变父母来获得良好的自我感觉的尝试。</li>
<li>寻找获得父母关爱的做法。</li>
<li>对父母持有激烈的情绪反应。</li>
<li>幻想总有一天父母会给予你应得的关心和支持。</li>
</ul>
</blockquote>
<hr />
<blockquote>
<p>你可以继续像个孩子似的幼稚和无助，等待父母给你发放成人许可证。</p>
<p>但实际上，决定权在你自己手里，而不是由他们来掌握。当你真正地放弃斗争时，会发现自己的生活也会顺利起来。</p>
</blockquote>
]]></content>
      <categories>
        <category>随想与摘录</category>
        <category>《原生家庭》（苏珊·福沃德）</category>
      </categories>
  </entry>
  <entry>
    <title>关爱合同</title>
    <url>/%E9%9A%8F%E6%83%B3%E4%B8%8E%E6%91%98%E5%BD%95/%E3%80%8A%E5%8E%9F%E7%94%9F%E5%AE%B6%E5%BA%AD%E3%80%8B%EF%BC%88%E8%8B%8F%E7%8F%8A%C2%B7%E7%A6%8F%E6%B2%83%E5%BE%B7%EF%BC%89/guan-ai-hetong/</url>
    <content><![CDATA[<blockquote>
<p>列出十件你每周可以做的事情，以帮助自己从悲伤中恢复，把这个清单当作和自己签订的“关爱合同”。合同里需要包含能为你带来愉悦的休闲活动，简单的比如泡泡浴、看电影，或者多参加垒球队的户外训练，抽时间读一本很棒的小说。不论单子上列出什么活动，最重要的是要去做这些事，而不仅是想想。</p>
<p>尽管我们需要时间来消化悲伤，但这个过程不是无限长的。你需要时间接受自己已经失去的事实，也需要时间来将自己的重点从过去的痛苦转移到现在的新生和未来的目标上。最终，伤口总会变成伤疤。当你接受了自己不需要为悲痛负责任这一事实的时候，你就会感觉好一些。</p>
</blockquote>
<hr />
<blockquote>
<p>他人应付多少责任并不重要，重要的是你不应该负任何责任。</p>
</blockquote>
<hr />
<blockquote>
<p>你已经是成年人了，可以承受追求自主生活的过程中所遇到的不快。行动总比空想好。</p>
</blockquote>
]]></content>
      <categories>
        <category>随想与摘录</category>
        <category>《原生家庭》（苏珊·福沃德）</category>
      </categories>
  </entry>
  <entry>
    <title>埋葬希望</title>
    <url>/%E9%9A%8F%E6%83%B3%E4%B8%8E%E6%91%98%E5%BD%95/%E3%80%8A%E5%8E%9F%E7%94%9F%E5%AE%B6%E5%BA%AD%E3%80%8B%EF%BC%88%E8%8B%8F%E7%8F%8A%C2%B7%E7%A6%8F%E6%B2%83%E5%BE%B7%EF%BC%89/maizangxiwang/</url>
    <content><![CDATA[<blockquote>
<p>我在这里埋葬我对美好家庭的期待。我在这里埋葬我对父母的希望。</p>
<p>我在这里埋葬我的幻想——我幻想童年时可以改变父母。我知道自己永远都不可能拥有理想的父母了，我为自己所失去的感到难过。但是我接受这种失去。希望我的幻想可以在此安息。</p>
</blockquote>
]]></content>
      <categories>
        <category>随想与摘录</category>
        <category>《原生家庭》（苏珊·福沃德）</category>
      </categories>
  </entry>
  <entry>
    <title>实现目标时的“想”与“做”</title>
    <url>/%E9%9A%8F%E6%83%B3%E4%B8%8E%E6%91%98%E5%BD%95/xiang-yu-zuo/</url>
    <content><![CDATA[<p>“想”，指的是给行动明确目标，指明方向。</p>
<p>“做”，指行动本身。</p>
<p>确定好方向，朝着这个方向行动，才能达到目标。所以，“做”之前，先要想好怎么做。</p>
<p>做的过程中要专注，沉浸在这个过程中。这时想，会分神，会对行动造成干扰，使效率降低。在实施过程中对目标、方向和方式心存疑惑，实表明“想”的功课没有做好，这时，要么放弃“做”而回到“想”，要么硬着头皮做完，切不可处于“想做二相”的状态。</p>
<p><strong>做之前先想，想完再做；做的时候不要想，做完再想，而且做完一定要想。</strong></p>
<p>但，想的时候不要多想，尤其不要无止境地追问：“这种方案到底能不能再改进？”这种追问，其实是犯了完美主义的瘾。奇怪的是，追求完美，却不用实验来验证，最后追求到的，只是幻想中的完美，而不是真正的完美。这不是完美主义，而是“幻想主义”。某种方案是否比之前的方案更好，要靠“做”来验证，获得验证结果之后，这时再想，既有素材，也有依据，能够保证最后的效果。</p>
]]></content>
      <categories>
        <category>随想与摘录</category>
      </categories>
  </entry>
  <entry>
    <title>自我界定</title>
    <url>/%E9%9A%8F%E6%83%B3%E4%B8%8E%E6%91%98%E5%BD%95/%E3%80%8A%E5%8E%9F%E7%94%9F%E5%AE%B6%E5%BA%AD%E3%80%8B%EF%BC%88%E8%8B%8F%E7%8F%8A%C2%B7%E7%A6%8F%E6%B2%83%E5%BE%B7%EF%BC%89/ziwojieding/</url>
    <content><![CDATA[<p><strong>自我界定</strong>是实现自主、做到不随意受他人影响的重要途径。<strong>自主</strong>由两个要素构成：选择和边界。</p>
<blockquote>
<p>人们在情感受到威胁或攻击的时候往往反应最为敏感，一触即发。这种敏感反应会出现在他们的每一段关系中。</p>
<p>你对他人的反应取决于他人对你的认同感。只有在没人反对你、批评你、厌恶你的情况下，你才会产生良好的自我感觉。你的感情相对于激发这些感情的事件来说往往过于激烈。你可能会把一个小小的建议看作人身攻击，把有建设性的微小批评看作个人的失败。没有了别人的肯定，连维持最起码的情绪稳定都会十分艰难。</p>
<p>反应的对立面是回应。在你做出回应时，你在感受的同时也在思考。</p>
<p>你能意识到自己的感受，但不会任凭它们驱使你冲动行事。</p>
<p>在与其他人周旋时，你将看到各种全新的选择，拥有更多的选择权，因为你的思维方式和理智并未被情感所蒙蔽。回应会将生活的许多控制权重新交还到你手上。</p>
</blockquote>
<p>“反应”一词，我理解为非理性、情绪化、不加思索与控制的行为表达。与此对应的，是理性、克制地表达自己的想法，以此守护自己的行为边界，不受他人影响和侵犯。</p>
<p>具体方法：</p>
<blockquote>
<p>方法1：非辩护性回应</p>
<p>只要你还渴望得到他人的认可，就得受人摆布。如果你想要脱离掌控，就要采取非辩护性回应。也就是说，你要在交涉过程中尽可能地化解过激情绪。</p>
<p>记住，一旦你生气、道歉、解释或是试图说服他们改变主意，就等于是把大部分的主动权交到他们手上。如果你请求对方原谅你或理解你，那么你就给了他拒绝满足你要求的权利。但是，如果你采用非辩护性回应的方式，你没有任何要求，而当你没有任何要求的时候，就不会遭到拒绝。</p>
<p>方法2：表明立场</p>
<p>表明立场可以明确你的想法和信念，什么对你来说是重要的，什么愿意做、什么不愿意做，什么有得商量、什么没得商量等等。这些问题可大可小，小到对某部新电影的看法，大到你对生活的基本信念。当然，在表明立场之前，首先你要明确自己的立场是什么。</p>
</blockquote>
]]></content>
      <categories>
        <category>随想与摘录</category>
        <category>《原生家庭》（苏珊·福沃德）</category>
      </categories>
  </entry>
  <entry>
    <title>Insertion Sort</title>
    <url>/Algorithm/Sort/insertion/</url>
    <content><![CDATA[<p>Different from selection sort, you go over the whole array just once.</p>
<p>For each unsorted item (let's call it <span class="math inline">\(a\)</span>), you check whether <span class="math inline">\(a\)</span> is smaller than the one on its left side. If so, these two items are not in order, it is time you swap them. Keep on swapping until <span class="math inline">\(a\)</span> is bigger than the item on the left. After this, move on to the next unsorted item.</p>
<span id="more"></span>
<h1 id="example">Example</h1>
<p>An example should help you better understand it. Let the array be <code>2 1 5 4 3</code>. First item is <code>2</code>. There's nothing before it, so we skip. Then check <code>1</code>, which is smaller than <code>2</code>, not in order, so we swap. The array becomes <code>1 2 5 4 3</code>. Note that we have already checked <code>2</code>, so we don't mind it and go to <code>5</code> directly. <code>5</code> is bigger than <code>2</code>, move on. Then <code>4</code>, smaller than <code>5</code>, not in order, swap. Now the array is <code>1 2 4 5 3</code>. Check <code>4</code> again, bigger than <code>2</code>, correct order, move on. Next is <code>3</code>, less than <code>5</code>, swap, giving us <code>1 2 4 3 5</code>. Check <code>3</code> again, swap. <code>1 2 3 4 5</code>. Check <code>3</code> again, move on, nothing behind <code>5</code>, and end. The changes of the array would be like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 1 5 4 3</span><br><span class="line">2  1 5 4 3</span><br><span class="line">1 2  5 4 3</span><br><span class="line">1 2 5  4 3</span><br><span class="line">1 2 4 5  3</span><br><span class="line">1 2 4 3 5</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure>
<h1 id="analysis">Analysis</h1>
<p>In the average case, insertion sort operates both compare and exchange for <span class="math inline">\(\sim N^2/4\)</span> times (<span class="math inline">\(N\)</span> being number of items in the array). As for the best case (sorted, ascending array) and the worst (descending array), it is easy to get the numbers.</p>
<p>Besides those, there is one more interesting case, that is, when the array is <strong>partially sorted</strong>. To understand what's a "partially sorted" array, first consider another concept: <strong>inversion</strong>. An inversion is a pair of items that are not in order. For example, in array <code>1 2 5 4 3</code>, there are three inversions (pairs), namely, <code>5-4</code>, <code>5-3</code>, and <code>4-3</code>. When the number of inversions (pairs) in an array is <span class="math inline">\(\le cN\)</span> (<span class="math inline">\(c\)</span> being any constant number), this array is <strong>partially sorted</strong>. Using insertion sort on partially sorted arrays, <span class="math inline">\(\#exchange=\#inversion,\#compare=\#exchange+N\)</span>, so the time cost will be <em>linear</em>.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>Sort</category>
      </categories>
  </entry>
  <entry>
    <title>Mergesort</title>
    <url>/Algorithm/Sort/merge/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>Sort</category>
      </categories>
  </entry>
  <entry>
    <title>Selection Sort</title>
    <url>/Algorithm/Sort/selection/</url>
    <content><![CDATA[<p>Selection sort is really simple.</p>
<p>You go all unsorted items over and over, and each time you choose the smallest item and bring it to the front as sorted. Equivalently, you can swap the smallest with the first unsorted item, so that it joins right after with sorted ones.</p>
<span id="more"></span>
<p>An example is good for understanding. For array <code>5 4 2 3 1</code>, first, we go over all elements to see which one is the smallest. We see <code>1</code> is smallest, so we swap <code>5</code> and <code>1</code>, thus the array becomes <code>1 4 2 3 5</code>. Now that <code>1</code> is already sorted, we no longer check it in the later rounds. The smallest item in the remaining ones is <code>2</code>, so we swap it with <code>4</code>, the one that takes the 1st place in the unsorted subarray. The array now is <code>1 2 4 3 5</code>. Now <code>3</code> is the smallest, and <code>4</code> is the 1st one in the unsorted array, so swap, resulting in <code>1 2 3 4 5</code>. Now the array is totally sorted, but the algorithm must continue. It runs the same procedure until <code>4</code> and <code>5</code> are checked and recognised as sorted.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 4 2 3 1</span><br><span class="line">1  4 2 3 5</span><br><span class="line">1 2  4 3 5</span><br><span class="line">1 2 3  4 5</span><br><span class="line">1 2 3 4  5</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure>
<p>As you bring the smallest to the front, the sorted ones are absolutely no bigger than unsorted ones. Because of that, in the subarray of sorted ones, values of item key will grow bigger (or sometimes remain the same).</p>
<p>This algorithm performs <span class="math inline">\(\sim N^2/2\)</span> compares and <span class="math inline">\(\sim N\)</span> swaps.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>Sort</category>
      </categories>
  </entry>
  <entry>
    <title>Shellsort</title>
    <url>/Algorithm/Sort/shell/</url>
    <content><![CDATA[<p>This algorithm is tricky.</p>
<p>In insertion sort, when you swap, an item is compared with another that is right before it, so you can only move it <em>one</em> step forward. Shellsort lets you move an item several steps forward when each compare is done. The intuition is simple, but it is a bit difficult to express in words.</p>
<span id="more"></span>
<h1 id="st-round">1st Round</h1>
<p>First, choose a number called <span class="math inline">\(h\)</span>. Split the array into subarrays, each of which contains <span class="math inline">\(h\)</span> items. (If there aren't enough number of items at the end of the array, it doesn't matter.) Using the insertion-sort method, you <em>compare and swap</em> the 1st items in every subarray, then 2nd items, then 3rd, and so on, until every item in the array is checked.</p>
<p>Let me give you an example here. Let <span class="math inline">\(h\)</span> be 7, and array be <code>5 2 3 8 9 6 7 1 4 0</code>, with 10 items in total. So the array is split up as <code>5 2 3 8 9 6 7 | 1 4 0</code>. The ones you want to compare and swap will be <code>5</code> and <code>1</code>. Having swapped with insertion-sort method, the resulting array will be like <code>1 2 3 8 9 6 7 | 5 4 0</code>. Then compare and swap the 2nd items, <code>2</code>, and <code>4</code>. Array remains the same. Then do 3rd items, <code>3</code>, and <code>0</code>. Now array becomes <code>1 2 0 8 9 6 7 | 5 4 3</code>. Then 4th items, 5th items, and so on. We are lucky here, the array isn't changed.</p>
<p>Now you can see how shellsort moves items several steps forward. This kind way of sorting is called <strong>h-sort</strong>ing, meaning sorting with an interval <span class="math inline">\(h\)</span>.</p>
<h1 id="later-rounds">Later Rounds</h1>
<p>However, this is not the end, because the array is still not completely sorted. The above is just one round of shellsort. We need to polish our result. In the 2nd round, we set <span class="math inline">\(h\)</span> to a smaller number. Say we set <span class="math inline">\(h\)</span> to 3. Array is split as <code>1 2 0 | 8 9 6 | 7 5 4 | 3</code>. Now we 3-sort the array. First do <code>1</code>, <code>8</code>, <code>7</code>, and <code>3</code>. Array becomes <code>1 2 0 | 3 9 6 | 7 5 4 | 8</code>. Then <code>2</code>, <code>9</code>, and <code>5</code>. Array changes to <code>1 2 0 | 3 5 6 | 7 9 4 | 8</code>. You might already get it, and this is getting boring, so I'll type no more. The result of this round is <code>1 2 0 | 3 5 4 | 7 9 6 | 8</code>.</p>
<p>This array is so stubborn! Still not in order! Smaller <span class="math inline">\(h\)</span>! I call 1! Wait, isn't that the same as insertion sort? Yes, but not quite. This is insertion sort on a <em>partially sorted</em> array. (Remember?) It's quicker than normal, plain insertion sort (middle finger up). Anyways, this round we polish our array really hard, and it finally becomes what we want, <code>0 1 2 3 4 5 6 7 8 9</code>.</p>
<p>Below is all changes we make on this tough array:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 2 3 8 9 6 7 1 4 0</span><br><span class="line">h=7</span><br><span class="line">5 2 3 8 9 6 7  1 4 0</span><br><span class="line">1 2 3 8 9 6 7  5 4 0</span><br><span class="line">1 2 0 8 9 6 7  5 4 3</span><br><span class="line">h=3</span><br><span class="line">1 2 0  8 9 6  7 5 4  3</span><br><span class="line">1 2 0  7 9 6  8 5 4  3</span><br><span class="line">1 2 0  7 9 6  3 5 4  8</span><br><span class="line">1 2 0  3 9 6  7 5 4  8</span><br><span class="line">1 2 0  3 5 6  7 9 4  8</span><br><span class="line">1 2 0  3 5 4  7 9 6  8</span><br><span class="line">h=1</span><br><span class="line">1 2 0 3 5 4 7 9 6 8</span><br><span class="line">1 0 2 3 5 4 7 9 6 8</span><br><span class="line">0 1 2 3 5 4 7 9 6 8</span><br><span class="line">0 1 2 3 4 5 7 9 6 8</span><br><span class="line">0 1 2 3 4 5 7 6 9 8</span><br><span class="line">0 1 2 3 4 5 6 7 9 8</span><br><span class="line">0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure>
<h1 id="h-value"><span class="math inline">\(h\)</span> Value</h1>
<p>In one word, shellsort is an algorithm where we <em>h-sort</em> an array multiple rounds, with value of <span class="math inline">\(h\)</span> decreasing in each round.</p>
<p>Now, the question is, how to decide what number <span class="math inline">\(h\)</span> should be in each round? Is it randomly chosen? Well, fundamentally, I would say, yes. But there are some sequences of <span class="math inline">\(h\)</span> value that have been verified to work better than other sequences. One such sequence is Knuth's <span class="math inline">\((3^x-1)/2\)</span> , generating numbers <code>1,4,13,40,121,...</code>. Another is <span class="math inline">\(2^x-1\)</span>, generating <code>1,3,7,15,31,...</code>. We used the latter one in the above example. Other than these, there are other sequences widely used, and new sequences are not yet found by researchers.</p>
<h1 id="analysis">Analysis</h1>
<p>There is no accurate mathematical expression to how much shellsort costs.</p>
<p>Nonetheless, generally speaking, shellsort is much quicker than selection and insertion sorts. So it is widely used, and you can definitely trust people using it.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>Sort</category>
      </categories>
  </entry>
  <entry>
    <title>Shuffling</title>
    <url>/Algorithm/Sort/shuffle/</url>
    <content><![CDATA[<p><strong>Shuffling</strong> is to rearrange items to random order.</p>
<p>A simple way of shuffling is to attribute to each item a random number as the key, and sort items by this key.</p>
<p>There is another shuffling algorithm created by Knuth. The array is considered to consist of a shuffled subarray and an unshuffled array. For each unshuffled item <code>a[i]</code>, generate a random integer <span class="math inline">\(r\)</span> (<span class="math inline">\(r\in[0,i]\)</span>), then swap <code>a[i]</code> and <code>a[r]</code>. After this, <code>a[i]</code> (now the new <code>a[r]</code>) is part of the shuffled subarray, and you move on to next unshuffled item.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">		a d b g f c e</span><br><span class="line">i=0, r=0</span><br><span class="line">		a  d b g f c e</span><br><span class="line">i=1, r=0</span><br><span class="line">		d a  b g f c e</span><br><span class="line">i=2, r=2</span><br><span class="line">		d a b  g f c e</span><br><span class="line">i=3, r=1</span><br><span class="line">		d g b a  f c e</span><br><span class="line">i=4, r=3</span><br><span class="line">		d g b f a  c e</span><br><span class="line">i=5, r=0</span><br><span class="line">		c g b f a d  e</span><br><span class="line">i=6, r=4</span><br><span class="line">		c g b f e d a</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>Sort</category>
      </categories>
  </entry>
  <entry>
    <title>Sorting Problem</title>
    <url>/Algorithm/Sort/sort/</url>
    <content><![CDATA[<p><strong>Sorting</strong> is to rearrange order of an array of items according to a key and an ordering rule.</p>
<span id="more"></span>
<p>Key is by what you sort. When you sort students, for example, you sort them by score, name, or age. These are keys.</p>
<p>Ordering rule is how you decide one item is prior to another. The most natural ordering rule is the <strong>Total Order</strong>. Let <span class="math inline">\(a\)</span> and <span class="math inline">\(b\)</span> are 2 items, then they follow:</p>
<ul>
<li><span class="math inline">\(a\le b,b\le a\Longrightarrow a=b\)</span></li>
<li><span class="math inline">\(a\le b,b\le c\Longrightarrow a\le c\)</span></li>
<li>either <span class="math inline">\(a&lt;b\)</span> or <span class="math inline">\(b&lt;a\)</span> or <span class="math inline">\(a=b\)</span></li>
</ul>
<p>Not all orders are total order. For example, in rock-paper-scissors game, <span class="math inline">\(rock&lt;paper\)</span>, <span class="math inline">\(paper&lt;scissors\)</span>, but <span class="math inline">\(rock&gt;scissors\)</span>.</p>
<p>Ideally, your sorting algorithms can sort <em>any</em> type of data, no matter it's file, number, string, or whatsoever.</p>
<p>In <a href="/categories/Algorithm/Sort">this</a> sub-category, I wrote some articles to explain some classic sorting algorithms.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
        <category>Sort</category>
      </categories>
  </entry>
  <entry>
    <title>Categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[
]]></content>
  </entry>
  <entry>
    <title>About this Blog</title>
    <url>/about/blog.html</url>
    <content><![CDATA[<h1 id="what-happened-before-this-blog">What happened before this blog</h1>
<p>In fact, two years ago, I did try to keep a blog site and I worked really heard to learn how to do it well, though I did not actually get the key point and gave it up.</p>
<p>During this summer vacation, which has just passed, I reviewed my earlier work and found it a piece of sh*t... So I just spent a while to learn once again to build a blog from scratch and tried around, and finally, I could write a decent piece and kicked the blog off.</p>
<h1 id="what-why-i-would-write">What &amp; Why I would write</h1>
<p>At this small site of mine, you will see, some notes on what I am learning at school, some notes on what I'm learning off school, my random thoughts, and so on, just whatever I think is worth sharing.</p>
<p>I take these things down mainly to stop me from learning without any reviewing and forgetting everything I've got to know for probablly just 2 months. You know, recalling is a great way to memorize information. And I also hope that blogging would make me a good note-taker. Apparently, I can practise some note-taking skills on it.</p>
<p>You may find that some of my posts are marked with a rather early time. They might be posted in 2018, and edited in 2021. That's because they are my early pieces posted somewhere else, and I collected them after this site was built. I want everything of mine filed and kept in one place.</p>
<h1 id="last">Last</h1>
<p>At last, I want whoever may see this blog to find something useful and enjoy it. We may not know each other, but I still find it satisfied should I be helpful to anyone.</p>
<p><strong><em>Wish you a good day,</em></strong></p>
<p><strong><em>Olivier</em></strong></p>
]]></content>
  </entry>
  <entry>
    <title>About</title>
    <url>/about/index.html</url>
    <content><![CDATA[<p>Hello! This is <strong><em>Olivier Jeannin</em></strong>'s blog. I hope you have all been doing well today.</p>
<p>If you are interested in who I am, you can see <a href="me.html" title="about me">this page</a>.</p>
<p>If you want to know what this blog is about, please <a href="blog.html" title="about this blog">click here</a>.</p>
<p>Hope you enjoy my blog ;D</p>
]]></content>
  </entry>
  <entry>
    <title>About Me</title>
    <url>/about/me.html</url>
    <content><![CDATA[
]]></content>
  </entry>
</search>
